(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (product term a next b)
  (accumulate * 1 term a next b))
(define (product-iter term a next b)
  (accumulate-iter * 1 term a next b))

;; test
(define (inc a) (+ a 1))
(define (p-term a)
  (define x (+ (* 2 a) 1))
  (/ (* (- x 1) (+ x 1)) (* x x)))
(define (pi-product b)
  (define a 1)
  (* 4.0 (product p-term a inc b)))
(define (pi-product-iter b)
  (define a 1)
  (* 4.0 (product-iter p-term a inc b)))
(pi-product 1000)
(pi-product-iter 1000)