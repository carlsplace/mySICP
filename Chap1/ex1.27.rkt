(define (test-carmichael n)
    (define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp)
           (remainder
            (square (expmod base (/ exp 2) m))
            m))
           (else
            (remainder
             (* base (expmod base (- exp 1) m))
             m))))
  (define (pass? a)
    (= (expmod a n n) a))
  (define (try-it a)
    (cond ((and (< a n) (pass? a)) (try-it (+ a 1)))
          ((= a n) (display "pass") (newline))))
  (try-it 1))
(define (square x) (* x x))
(test-carmichael 561)
(test-carmichael 1105)
(test-carmichael 1729)
(test-carmichael 2465)
(test-carmichael 2821)
(test-carmichael 6601)